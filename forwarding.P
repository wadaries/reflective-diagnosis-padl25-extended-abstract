% % ------------------------------------------------------------------
% forwarding behavior (data-plane)
% % ------------------------------------------------------------------
% forwarding edges
edge(1,2). edge(1,4). edge(2,3). edge(2,4). edge(1,5). edge(5,6).
edge(6,1). % add forwarding loop
edge(7,8). edge(8,9). edge(8,3).

reach(X,Y) :- edge(X,Y).
reach(X,Y) :- edge(X,Z), reach(Z, Y).

path(X,Y,[X,Y]) :- edge(X,Y).
path(X,Y,P) :- edge(X,Z), Z\=X, Z\=Y, path(Z,Y,P1), loop_free_path(X,P1), P=[X|P1].

reachall(X,Y) :- path(X,Y,P), write(P), fail. % 2024/06/08 22:50:25, copied from bgp.P

hop(X,Y,C) :- path(X,Y,P), length(P,C).


t(X,Y) :- edge(X,Y).
t(X,X) :- not edge(X,Y).

fw3(0,S,S).
fw3(B,S,D) :- 
	B>0, B1 is B-1,
	fw3(B1,S,M), 
	t(M,D).

dplane3(S,D) :- fw3(5,S,D).

% collect(dplane3(1,X),T,C), not sf(C).
% X = 3

% % ------------------------------------------------------------------
% hotnets2024 2024/06/18 00:37:35
% only load_dyn(net). load_dyn(meta).

% collect(dplane3(X,Y),T,C), not sf(C).

% ------------------------------------------------------------------
% 2024/06/14 07:23:56
% net(0,S,S).
% net(B,S,T) :- 
% 	B>0, B1 is B-1,
% 	delta(S,M), 
% 	net(B1,M,T).

% delta(X,Y) :- edge(X,Y).
% delta(X,X) :- not edge(X,Y).

% | ?- collect(net(5,1,X),T,C), not sf(C).
% X = 6
% T = (net(5,1,6) :- (5 > 0 :- builtin),(4 is 5 - 1 :- builtin),(delta([1],[5]) :- (edge(1,5) :- true)),(net(4,5,6) :- (4 > 0 :- builtin),(3 is 4 - 1 :- builtin),(delta([5],[6]) :- (edge(5,6) :- true)),(net(3,6,6) :- (3 > 0 :- builtin),(2 is 3 - 1 :- builtin),(delta([6],[1]) :- (edge(6,1) :- true)),(net(2,1,6) :- (2 > 0 :- builtin),(1 is 2 - 1 :- builtin),(delta([1],[5]) :- (edge(1,5) :- true)),(net(1,5,6) :- (1 > 0 :- builtin),(0 is 1 - 1 :- builtin),(delta([5],[6]) :- (edge(5,6) :- true)),(net(0,6,6) :- true))))))
% C = [edge(1,5),edge(5,6),edge(6,1),edge(1,5),edge(5,6)]

% yes

% ------------------------------------------------------------------
% 2024/06/15 21:21:24 ... Hotnets

% init(X).
% run_dp(N,X,Y) :- init(X), net(N,X,Y).

run_dp(X,Y) :- net(16,X,Y).

delta([H,L],[H2,L2]) :- h_tran(L,H,H2), l_tran(H2,L,L2). % each transition is a header rewrite, followed by a location rewrite
% l_tran(H,X,Y) :- edge(X,Y).
% l_tran(H,X,X) :- not edge(X,Y).
% h_tran(L,H,H). % no header rewrite

% network 1
% collect(run_dp(['h',1],X),T,C), not sf(C), print2(T). 2024/06/15 21:21:01
% C = [edge(1,5),edge(5,6),edge(6,1),edge(1,5),edge(5,6),edge(6,1),edge(1,2),edge(2,3)]
% collect(run_dp([h,1],[h,4]),T,C), collect(run_dp(X,Y),T2,C2), disjoint(C,C2), print2(T2).
% ------------------------------------------------------------------

% network 2
l_tran(h4,3,0) :- !. % drop header h4 at location 3
l_tran(H,X,Y) :- link2(X,Y), !.
l_tran(H,X,X) :- not link2(X,Y).
link2(1,3). link2(2,3). link2(3,4).

h_tran(1,h1,h2) :- !. % location 1 rewrites h1 to h2
h_tran(4,h2,h3) :- !. % location 1 rewrites h1 to h2
h_tran(L,H,H). % the rest of the locations keep header unmodified



% l_tran(H,X,X) :- is_server(X).
% is_server(s1). is_server(s2).

% path(X,Y,[X,Y]) :- edge(X,Y).
% path(X,Y,[X|P]) :- edge(X,Z), path(Z,Y,P). 

% % 2024/05/15 03:18:21
% reachall(X,Y) :- path(X,Y,P), write(P), fail. copied from 
